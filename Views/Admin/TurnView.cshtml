@model sprint_final_salud_linux.Models.Turn
@{
    ViewData["Title"] = "Pantalla de Turno";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container my-5 d-flex justify-content-center align-items-center text-center">
    <div id="turnPanel" class="card shadow-lg border-0 rounded-4 w-100" style="max-width: 650px;">
        <div class="card-header bg-primary text-white text-center fw-bold position-relative">
            <span class="header-title">
                <i class="fas fa-bell me-2"></i> Panel de Turnos - Sala de Espera
            </span>
            <button id="fullscreenBtn" class="btn btn-light btn-sm fw-bold position-absolute end-0 me-3">
                <i class="fas fa-expand"></i> Pantalla completa
            </button>
        </div>

        <div class="card-body text-center py-5">
            <h4 class="text-secondary fw-semibold mb-3">Turno actual:</h4>
            <h1 id="actual" class="turno-actual text-primary display-1 fw-bold">@Model.CurrentTurn</h1>
            <h5 id="ventanilla" class="text-info fw-bold fs-3 mt-2">Ventanilla: -</h5>
            <hr class="my-4" />
            <h5 class="text-muted fw-semibold mb-3">Siguiente:</h5>
            <h2 id="siguiente" class="turno-siguiente text-primary fw-bold">@Model.NextTurn</h2>
        </div>
    </div>
</div>

@section Scripts {
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
const connection = new signalR.HubConnectionBuilder().withUrl("/turnos").build();

const actual = document.getElementById("actual");
const siguiente = document.getElementById("siguiente");
const ventanilla = document.getElementById("ventanilla");
const fullscreenBtn = document.getElementById("fullscreenBtn");
const panel = document.getElementById("turnPanel");

connection.on("ActualizarTurnos", (CurrentTurn, NextTurn, Ventanilla) => {
    actual.innerText = CurrentTurn;
    siguiente.innerText = NextTurn;
    ventanilla.innerText = "Ventanilla: " + (Ventanilla || "-");

    actual.classList.add("neon-anim","fade-anim");
    ventanilla.classList.add("glow-vent");
    setTimeout(()=>{
        actual.classList.remove("neon-anim","fade-anim");
        ventanilla.classList.remove("glow-vent");
    },3000);
});

connection.start().catch(err => console.error(err.toString()));

fullscreenBtn.addEventListener("click", () => {
    if (!document.fullscreenElement) {
        panel.requestFullscreen().then(()=>{fullscreenBtn.innerHTML='<i class="fas fa-compress"></i> Salir';});
    } else {
        document.exitFullscreen().then(()=>{fullscreenBtn.innerHTML='<i class="fas fa-expand"></i> Pantalla completa';});
    }
});
</script>

<style>
#actual,#siguiente,#ventanilla{user-select:none;cursor:default;outline:none;border:none;}
.header-title{text-align:center;}
.neon-anim{color:#007bff;text-shadow:0 0 10px #007bff,0 0 20px #007bff,0 0 40px #007bff,0 0 80px #007bff;animation:glow 1.2s ease-in-out infinite alternate;}
@@keyframes glow{from{text-shadow:0 0 5px #007bff,0 0 15px #007bff;}to{text-shadow:0 0 25px #00bfff,0 0 60px #00bfff;}}
.fade-anim{animation:fadeInOut 1.5s ease-in-out infinite alternate;}
@@keyframes fadeInOut{0%{opacity:1;transform:scale(1);}50%{opacity:0.7;transform:scale(1.1);}100%{opacity:1;transform:scale(1);}}
.glow-vent{color:#00bfff;text-shadow:0 0 5px #00bfff,0 0 15px #00bfff,0 0 30px #00bfff;transition:all 0.5s ease;}
#fullscreenBtn{border:none;color:#007bff;background:#fff;transition:0.3s;}
#fullscreenBtn:hover{background:#007bff;color:#fff;}
.card{width:100%;max-width:650px;}
h1.turno-actual{font-size:6rem;}
h2.turno-siguiente{font-size:3rem;}
@@media(max-width:768px){h1.turno-actual{font-size:4rem;}h2.turno-siguiente{font-size:2rem;}#ventanilla{font-size:1.5rem;}}
body:fullscreen .container{padding:0;margin:0;width:100vw;height:100vh;display:flex;justify-content:center;align-items:center;}
body:fullscreen .card{width:95vw;height:95vh;}
</style>
}